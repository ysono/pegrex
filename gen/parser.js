/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,5],$V1=[1,6],$V2=[5,7,21],$V3=[5,7,13,14,15,16,17,18,20,21,22,28,29,31,34,39,44,45,46,47,48,49,51,52,53,54,55,56,57,58,60,64,69,70,71,72],$V4=[1,78],$V5=[1,79],$V6=[1,80],$V7=[1,81],$V8=[1,82],$V9=[1,84],$Va=[1,85],$Vb=[1,83],$Vc=[1,86],$Vd=[1,87],$Ve=[1,88],$Vf=[1,89],$Vg=[1,90],$Vh=[1,91],$Vi=[1,92],$Vj=[1,96],$Vk=[1,61],$Vl=[1,71],$Vm=[1,72],$Vn=[1,73],$Vo=[1,74],$Vp=[1,75],$Vq=[1,76],$Vr=[1,77],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,93],$Vz=[1,94],$VA=[1,95],$VB=[1,58],$VC=[1,59],$VD=[1,97],$VE=[1,98],$VF=[1,99],$VG=[7,13,14,15,16,17,18,20,21,22,28,29,31,34,39,44,45,46,47,48,49,51,52,53,54,55,56,57,58,60,64,69,70,71,72],$VH=[5,7,13,14,15,16,17,18,19,20,21,22,24,25,26,28,29,31,34,39,44,45,46,47,48,49,51,52,53,54,55,56,57,58,60,64,69,70,71,72],$VI=[1,109],$VJ=[1,110],$VK=[1,111],$VL=[1,108],$VM=[1,125],$VN=[1,126],$VO=[1,112],$VP=[1,114],$VQ=[1,115],$VR=[1,113],$VS=[1,116],$VT=[1,117],$VU=[1,118],$VV=[1,119],$VW=[1,120],$VX=[1,121],$VY=[1,122],$VZ=[1,124],$V_=[1,127],$V$=[1,130],$V01=[1,131],$V11=[1,132],$V21=[1,135],$V31=[1,137],$V41=[1,136],$V51=[1,140],$V61=[1,128],$V71=[1,129],$V81=[1,133],$V91=[1,134],$Va1=[1,138],$Vb1=[1,139],$Vc1=[1,123],$Vd1=[2,52],$Ve1=[1,105],$Vf1=[1,141],$Vg1=[1,142],$Vh1=[1,143],$Vi1=[1,144],$Vj1=[5,7,13,14,15,16,17,18,19,20,21,22,28,29,31,34,39,44,45,46,47,48,49,51,52,53,54,55,56,57,58,60,64,69,70,71,72],$Vk1=[1,168],$Vl1=[1,169],$Vm1=[1,170],$Vn1=[1,173],$Vo1=[1,171],$Vp1=[1,172],$Vq1=[1,174],$Vr1=[1,175],$Vs1=[7,13,14,15,16,17,18,19,20,21,22,24,25,26,28,29,31,34,39,44,45,46,47,48,49,51,52,53,54,55,56,57,58,60,64,69,70,71,72],$Vt1=[2,60],$Vu1=[2,61];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Pattern":3,"Disjunction":4,"EOF":5,"Alternative_formatted":6,"|":7,"Alternative":8,"Term":9,"Assertion":10,"Atom":11,"Quantifier":12,"^":13,"$":14,"\\\\":15,"b":16,"B":17,"(":18,"?":19,"=":20,")":21,"!":22,"QuantifierPrefix":23,"*":24,"+":25,"{":26,"integer":27,"}":28,",":29,"PatternCharacter":30,".":31,"AtomEscape":32,"CharacterClass":33,":":34,"DecimalDigits":35,"CharacterEscape":36,"CharacterClassEscape":37,"ControlEscape":38,"c":39,"ControlLetter":40,"HexEscapeSequence":41,"UnicodeEscapeSequence":42,"IdentityEscape":43,"f":44,"n":45,"r":46,"t":47,"v":48,"u":49,"HexDigit":50,"x":51,"d":52,"D":53,"s":54,"S":55,"w":56,"W":57,"[":58,"ClassRanges":59,"]":60,"NonemptyClassRanges":61,"ClassAtom":62,"NonemptyClassRangesNoDash":63,"-":64,"ClassAtomNoDash":65,"ClassAtomNoDash_single":66,"ClassEscape":67,"CHARS_DIGIT_DECIMAL":68,"CHAR_DIGIT_DECIMAL":69,"CHAR_DIGIT_HEX":70,"CHAR_ALPHABET":71,"CHAR_OTHER":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"|",13:"^",14:"$",15:"\\\\",16:"b",17:"B",18:"(",19:"?",20:"=",21:")",22:"!",24:"*",25:"+",26:"{",28:"}",29:",",31:".",34:":",39:"c",44:"f",45:"n",46:"r",47:"t",48:"v",49:"u",51:"x",52:"d",53:"D",54:"s",55:"S",56:"w",57:"W",58:"[",60:"]",64:"-",68:"CHARS_DIGIT_DECIMAL",69:"CHAR_DIGIT_DECIMAL",70:"CHAR_DIGIT_HEX",71:"CHAR_ALPHABET",72:"CHAR_OTHER"},
productions_: [0,[3,2],[4,1],[4,3],[6,1],[8,0],[8,2],[9,1],[9,1],[9,2],[10,1],[10,1],[10,2],[10,2],[10,5],[10,5],[12,1],[12,2],[23,1],[23,1],[23,1],[23,3],[23,4],[23,5],[11,1],[11,1],[11,2],[11,1],[11,3],[11,5],[32,1],[32,1],[32,1],[36,1],[36,2],[36,1],[36,1],[36,1],[38,1],[38,1],[38,1],[38,1],[38,1],[41,5],[42,3],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[33,3],[59,0],[59,1],[61,1],[61,2],[61,4],[63,1],[63,2],[63,4],[62,1],[62,1],[65,1],[65,2],[67,1],[67,1],[67,1],[67,1],[27,1],[35,1],[35,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = {alternatives: $$[$0-1]}
        if ($$[$0-1].length > 1) {
            this.$.hint = 'ECMA specifies right-recursive, but in practice, all major browsers appear to use all Alternatives concurrently for the earliest match in string.'
        }
        return this.$
        
break;
case 2:
this.$ = [$$[$0]]
break;
case 3:
this.$ = $$[$0-2].concat($$[$0])
break;
case 4:

        if (! $$[$0].length) {
            $$[$0].concat({
                type: 'zeroLenStr',
                hint: 'matches zero-length str. TODO must use /(?:)/ in the literal form.'
            })
        }
        this.$ = {terms: $$[$0]}
        
break;
case 5:
this.$ = []
break;
case 6:
this.$ = $$[$0-1].concat($$[$0])
break;
case 9:
$$[$0-1].quantifier = $$[$0]; this.$ = $$[$0-1]
break;
case 10:

        this.$ = {
            type: 'beginningOfLine',
            hint: 'Matches the zero-length string after a new line char, i.e. one of [newline (\\n), carriage return (\\r), line separator (\\u2028), paragraph separator (\\2029)]'
        }
        
break;
case 11:

        this.$ = {
            type: 'endOfLine',
            hint: 'Matches the zero-length string before a new line char, i.e. one of [newline (\\n), carriage return (\\r), line separator (\\u2028), paragraph separator (\\2029)]'
        }
        
break;
case 12:

        this.$ = {
            type: 'wordBoundary',
            hint: 'Matches the zero-length string between (a word char (\\w)) and (a non-word char (\\W) or the beginning or end of a line")'
        }
        
break;
case 13:

        this.$ = {
            type: 'nonWordBoundary',
            hint: 'Matches the zero-length string between a word char (\\w) and a word char (\\w)'
        }
        
break;
case 14:

        this.$ = {
            type: 'positiveLookforward',
            val: $$[$0-1]
        }
        
break;
case 15:

        this.$ = {
            type: 'negativeLookforward',
            val: $$[$0-1]
        }
        
break;
case 16:
$$[$0].greedy = true; this.$ = $$[$0]
break;
case 17:
$$[$0-1].greedy = false; this.$ = $$[$0-1]
break;
case 18:
this.$ = {min: 0, max: Infinity}
break;
case 19:
this.$ = {min: 1, max: Infinity}
break;
case 20:
this.$ = {min: 0, max: 1}
break;
case 21:
this.$ = {min: $$[$0-1], max: $$[$0-1]}
break;
case 22:
this.$ = {min: $$[$0-2], max: Infinity}
break;
case 23:
this.$ = {min: $$[$0-3], max: $$[$0-1]}
break;
case 24:
this.$ = {type: 'specificChar', val: $$[$0]}
break;
case 25:
this.$ = {type: 'anyChar'}
break;
case 26: case 63:
this.$ = $$[$0]
break;
case 28:

        this.$ = {
            type: 'capturingGroup',
            val: $$[$0-1]
        }
        
break;
case 29:
this.$ = {type: 'nonCapturingGroup', val: $$[$0-1]}
break;
case 30:
this.$ = {type: 'escapedInteger', val: $$[$0]}
break;
case 45:
this.$ = {type: 'digitChar', hint: '[0-9]'}
break;
case 46:
this.$ = {type: 'nonDigitChar', hint: '[^0-9]'}
break;
case 47:
this.$ = {type: 'whitespaceChar', hint: 'TODO'}
break;
case 48:
this.$ = {type: 'notWhitespaceChar', hint: 'TODO'}
break;
case 49:
this.$ = {type: 'wordChar', hint: 'TODO'}
break;
case 50:
this.$ = {type: 'nonWordChar', hint: 'TODO'}
break;
case 51:
this.$ = $$[$0-1]
break;
case 64:

        debugger /* TODO closure needed? */
        (function(){
            // this particular literal is eval'd the same way as a string:
            // the first 0 to 3 chars could be octal.
            var converted = eval("'\\" + $$[$0] + "'")
            var lenDiff = this.$.length - converted.length
            var chars
            function specificChars(str) {
                str.split('').map(function(char){
                    return {type: 'specificChar(escaped)', val: char}
                })
            }
            if (lenDiff > 0) {
                chars = [{
                    type: 'charInOctal',
                    val: $$[$0].slice(1, 1 + lenDiff),
                    convertedVal: converted[0]
                }]
                chars = chars.concat(specificChars(converted.slice(1)))
            } else {
                chars = specificChars(converted)
            }
            this.$ = chars
        })()
        
break;
case 65:
this.$ = {type: 'backspace'}
break;
case 68:
this.$ = Number($$[$0])
break;
}
},
table: [o([5,7,13,14,15,16,17,18,20,22,28,29,31,34,39,44,45,46,47,48,49,51,52,53,54,55,56,57,58,60,64,69,70,71,72],$V0,{3:1,4:2,6:3,8:4}),{1:[3]},{5:[1,5],7:$V1},o($V2,[2,2]),o($V2,[2,4],{9:7,10:8,11:9,30:14,33:16,13:[1,10],14:[1,11],15:[1,12],16:[1,24],17:[1,25],18:[1,13],20:[1,17],22:[1,18],28:[1,19],29:[1,20],31:[1,15],34:[1,23],39:[1,26],44:[1,29],45:[1,30],46:[1,31],47:[1,34],48:[1,36],49:[1,35],51:[1,39],52:[1,27],53:[1,28],54:[1,32],55:[1,33],56:[1,37],57:[1,38],58:[1,44],60:[1,21],64:[1,22],69:[1,40],70:[1,41],71:[1,42],72:[1,43]}),{1:[2,1]},o($V3,$V0,{8:4,6:45}),o($V3,[2,6]),o($V3,[2,7]),o($V3,[2,8],{12:46,23:47,19:[1,50],24:[1,48],25:[1,49],26:[1,51]}),o($V3,[2,10]),o($V3,[2,11]),{7:$V4,13:$V5,14:$V6,15:$V7,16:[1,52],17:[1,53],18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,24:$Vd,25:$Ve,26:$Vf,28:$Vg,29:$Vh,31:$Vi,32:54,34:$Vj,35:55,36:56,37:57,38:60,39:$Vk,41:62,42:63,43:64,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,60:$Vz,64:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},o($VG,$V0,{6:3,8:4,4:101,19:[1,100]}),o($VH,[2,24]),o($VH,[2,25]),o($VH,[2,27]),o($VH,[2,71]),o($VH,[2,72]),o($VH,[2,73]),o($VH,[2,74]),o($VH,[2,75]),o($VH,[2,76]),o($VH,[2,77]),o($VH,[2,78]),o($VH,[2,79]),o($VH,[2,80]),o($VH,[2,81]),o($VH,[2,82]),o($VH,[2,83]),o($VH,[2,84]),o($VH,[2,85]),o($VH,[2,86]),o($VH,[2,87]),o($VH,[2,88]),o($VH,[2,89]),o($VH,[2,90]),o($VH,[2,91]),o($VH,[2,92]),o($VH,[2,93]),o($VH,[2,94]),o($VH,[2,95]),o($VH,[2,96]),o($VH,[2,97]),{7:$VI,13:$VJ,14:$VK,15:$VL,16:$VM,17:$VN,18:$VO,19:$VP,20:$VQ,21:$VR,22:$VS,24:$VT,25:$VU,26:$VV,28:$VW,29:$VX,31:$VY,34:$VZ,39:$V_,44:$V$,45:$V01,46:$V11,47:$V21,48:$V31,49:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,56:$Va1,57:$Vb1,58:$Vc1,59:102,60:$Vd1,61:103,62:104,64:$Ve1,65:106,66:107,69:$Vf1,70:$Vg1,71:$Vh1,72:$Vi1},o($V2,[2,3]),o($V3,[2,9]),o($V3,[2,16],{19:[1,145]}),o($Vj1,[2,18]),o($Vj1,[2,19]),o($Vj1,[2,20]),{27:146,35:147,68:$VB,69:$VC},o($V3,[2,12]),o($V3,[2,13]),o($VH,[2,26]),o($VH,[2,30]),o($VH,[2,31]),o($VH,[2,32]),o($VH,[2,69]),o($VH,[2,70]),o($VH,[2,33]),{16:[1,149],17:[1,150],39:[1,151],40:148,44:[1,154],45:[1,155],46:[1,156],47:[1,159],48:[1,161],49:[1,160],51:[1,164],52:[1,152],53:[1,153],54:[1,157],55:[1,158],56:[1,162],57:[1,163],70:[1,165],71:[1,166]},o($VH,[2,35]),o($VH,[2,36]),o($VH,[2,37]),o($VH,[2,45]),o($VH,[2,46]),o($VH,[2,47]),o($VH,[2,48]),o($VH,[2,49]),o($VH,[2,50]),o($VH,[2,38]),o($VH,[2,39]),o($VH,[2,40]),o($VH,[2,41]),o($VH,[2,42]),{16:$Vk1,17:$Vl1,39:$Vm1,44:$Vn1,50:167,52:$Vo1,53:$Vp1,69:$Vq1,70:$Vr1},{16:$Vk1,17:$Vl1,39:$Vm1,44:$Vn1,50:176,52:$Vo1,53:$Vp1,69:$Vq1,70:$Vr1},o($VH,[2,160]),o($VH,[2,161]),o($VH,[2,162]),o($VH,[2,163]),o($VH,[2,164]),o($VH,[2,165]),o($VH,[2,166]),o($VH,[2,167]),o($VH,[2,168]),o($VH,[2,169]),o($VH,[2,170]),o($VH,[2,171]),o($VH,[2,172]),o($VH,[2,173]),o($VH,[2,174]),o($VH,[2,175]),o($VH,[2,176]),o($VH,[2,177]),o($VH,[2,178]),o($VH,[2,179]),o($VH,[2,180]),o($VH,[2,181]),{20:[1,177],22:[1,178],34:[1,179]},{7:$V1,21:[1,180]},{60:[1,181]},{60:[2,53]},{7:$VI,13:$VJ,14:$VK,15:$VL,16:$VM,17:$VN,18:$VO,19:$VP,20:$VQ,21:$VR,22:$VS,24:$VT,25:$VU,26:$VV,28:$VW,29:$VX,31:$VY,34:$VZ,39:$V_,44:$V$,45:$V01,46:$V11,47:$V21,48:$V31,49:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,56:$Va1,57:$Vb1,58:$Vc1,60:[2,54],62:184,63:182,64:[1,183],65:185,66:107,69:$Vf1,70:$Vg1,71:$Vh1,72:$Vi1},o($Vs1,$Vt1),o($Vs1,$Vu1),o($Vs1,[2,62]),{7:$V4,13:$V5,14:$V6,15:$V7,16:[1,188],18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,24:$Vd,25:$Ve,26:$Vf,28:$Vg,29:$Vh,31:$Vi,34:$Vj,35:187,36:189,37:190,38:60,39:$Vk,41:62,42:63,43:64,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,60:$Vz,64:$VA,67:186,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF},o($Vs1,[2,98]),o($Vs1,[2,99]),o($Vs1,[2,100]),o($Vs1,[2,101]),o($Vs1,[2,102]),o($Vs1,[2,103]),o($Vs1,[2,104]),o($Vs1,[2,105]),o($Vs1,[2,106]),o($Vs1,[2,107]),o($Vs1,[2,108]),o($Vs1,[2,109]),o($Vs1,[2,110]),o($Vs1,[2,111]),o($Vs1,[2,112]),o($Vs1,[2,113]),o($Vs1,[2,114]),o($Vs1,[2,115]),o($Vs1,[2,116]),o($Vs1,[2,117]),o($Vs1,[2,118]),o($Vs1,[2,119]),o($Vs1,[2,120]),o($Vs1,[2,121]),o($Vs1,[2,122]),o($Vs1,[2,123]),o($Vs1,[2,124]),o($Vs1,[2,125]),o($Vs1,[2,126]),o($Vs1,[2,127]),o($Vs1,[2,128]),o($Vs1,[2,129]),o($Vs1,[2,130]),o($Vs1,[2,131]),o($Vs1,[2,132]),o($Vs1,[2,133]),o($V3,[2,17]),{28:[1,191],29:[1,192]},o([28,29],[2,68]),o($VH,[2,34]),o($VH,[2,134]),o($VH,[2,135]),o($VH,[2,136]),o($VH,[2,137]),o($VH,[2,138]),o($VH,[2,139]),o($VH,[2,140]),o($VH,[2,141]),o($VH,[2,142]),o($VH,[2,143]),o($VH,[2,144]),o($VH,[2,145]),o($VH,[2,146]),o($VH,[2,147]),o($VH,[2,148]),o($VH,[2,149]),o($VH,[2,150]),o($VH,[2,151]),{16:$Vk1,17:$Vl1,39:$Vm1,44:$Vn1,50:193,52:$Vo1,53:$Vp1,69:$Vq1,70:$Vr1},o($VH,[2,152]),o($VH,[2,153]),o($VH,[2,154]),o($VH,[2,155]),o($VH,[2,156]),o($VH,[2,157]),o($VH,[2,158]),o($VH,[2,159]),{16:$Vk1,17:$Vl1,39:$Vm1,44:$Vn1,50:194,52:$Vo1,53:$Vp1,69:$Vq1,70:$Vr1},o($VG,$V0,{6:3,8:4,4:195}),o($VG,$V0,{6:3,8:4,4:196}),o($VG,$V0,{6:3,8:4,4:197}),o($VH,[2,28]),o($VH,[2,51]),{60:[2,55]},{7:$VI,13:$VJ,14:$VK,15:$VL,16:$VM,17:$VN,18:$VO,19:$VP,20:$VQ,21:$VR,22:$VS,24:$VT,25:$VU,26:$VV,28:$VW,29:$VX,31:$VY,34:$VZ,39:$V_,44:$V$,45:$V01,46:$V11,47:$V21,48:$V31,49:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,56:$Va1,57:$Vb1,58:$Vc1,60:$Vt1,62:198,64:$Ve1,65:106,66:107,69:$Vf1,70:$Vg1,71:$Vh1,72:$Vi1},{60:[2,57]},{7:$VI,13:$VJ,14:$VK,15:$VL,16:$VM,17:$VN,18:$VO,19:$VP,20:$VQ,21:$VR,22:$VS,24:$VT,25:$VU,26:$VV,28:$VW,29:$VX,31:$VY,34:$VZ,39:$V_,44:$V$,45:$V01,46:$V11,47:$V21,48:$V31,49:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,56:$Va1,57:$Vb1,58:$Vc1,60:$Vu1,62:184,63:199,64:[1,200],65:185,66:107,69:$Vf1,70:$Vg1,71:$Vh1,72:$Vi1},o($Vs1,[2,63]),o($Vs1,[2,64]),o($Vs1,[2,65]),o($Vs1,[2,66]),o($Vs1,[2,67]),o($Vj1,[2,21]),{27:202,28:[1,201],35:147,68:$VB,69:$VC},{16:$Vk1,17:$Vl1,39:$Vm1,44:$Vn1,50:203,52:$Vo1,53:$Vp1,69:$Vq1,70:$Vr1},o($VH,[2,44]),{7:$V1,21:[1,204]},{7:$V1,21:[1,205]},{7:$V1,21:[1,206]},{7:$VI,13:$VJ,14:$VK,15:$VL,16:$VM,17:$VN,18:$VO,19:$VP,20:$VQ,21:$VR,22:$VS,24:$VT,25:$VU,26:$VV,28:$VW,29:$VX,31:$VY,34:$VZ,39:$V_,44:$V$,45:$V01,46:$V11,47:$V21,48:$V31,49:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,56:$Va1,57:$Vb1,58:$Vc1,59:207,60:$Vd1,61:103,62:104,64:$Ve1,65:106,66:107,69:$Vf1,70:$Vg1,71:$Vh1,72:$Vi1},{60:[2,58]},{7:$VI,13:$VJ,14:$VK,15:$VL,16:$VM,17:$VN,18:$VO,19:$VP,20:$VQ,21:$VR,22:$VS,24:$VT,25:$VU,26:$VV,28:$VW,29:$VX,31:$VY,34:$VZ,39:$V_,44:$V$,45:$V01,46:$V11,47:$V21,48:$V31,49:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,56:$Va1,57:$Vb1,58:$Vc1,60:$Vt1,62:208,64:$Ve1,65:106,66:107,69:$Vf1,70:$Vg1,71:$Vh1,72:$Vi1},o($Vj1,[2,22]),{28:[1,209]},{16:$Vk1,17:$Vl1,39:$Vm1,44:$Vn1,50:210,52:$Vo1,53:$Vp1,69:$Vq1,70:$Vr1},o($V3,[2,14]),o($V3,[2,15]),o($VH,[2,29]),{60:[2,56]},{7:$VI,13:$VJ,14:$VK,15:$VL,16:$VM,17:$VN,18:$VO,19:$VP,20:$VQ,21:$VR,22:$VS,24:$VT,25:$VU,26:$VV,28:$VW,29:$VX,31:$VY,34:$VZ,39:$V_,44:$V$,45:$V01,46:$V11,47:$V21,48:$V31,49:$V41,51:$V51,52:$V61,53:$V71,54:$V81,55:$V91,56:$Va1,57:$Vb1,58:$Vc1,59:211,60:$Vd1,61:103,62:104,64:$Ve1,65:106,66:107,69:$Vf1,70:$Vg1,71:$Vh1,72:$Vi1},o($Vj1,[2,23]),o($VH,[2,43]),{60:[2,59]}],
defaultActions: {5:[2,1],103:[2,53],182:[2,55],184:[2,57],199:[2,58],207:[2,56],211:[2,59]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};



/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 68
break;
case 1:return 7
break;
case 2:return 13
break;
case 3:return 14
break;
case 4:return 15
break;
case 5:return 18
break;
case 6:return 21
break;
case 7:return 19
break;
case 8:return 20
break;
case 9:return 22
break;
case 10:return 24
break;
case 11:return 25
break;
case 12:return 26
break;
case 13:return 28
break;
case 14:return 29
break;
case 15:return 31
break;
case 16:return 58
break;
case 17:return 60
break;
case 18:return 64
break;
case 19:return 34
break;
case 20:return 16
break;
case 21:return 17
break;
case 22:return 39
break;
case 23:return 52
break;
case 24:return 53
break;
case 25:return 44
break;
case 26:return 45
break;
case 27:return 46
break;
case 28:return 54
break;
case 29:return 55
break;
case 30:return 47
break;
case 31:return 49
break;
case 32:return 48
break;
case 33:return 56
break;
case 34:return 57
break;
case 35:return 51
break;
case 36:return 5
break;
case 37:return 69
break;
case 38:return 70
break;
case 39:return 71
break;
case 40:return 72
break;
}
},
rules: [/^(?:[0-9]{2,})/,/^(?:[|])/,/^(?:[\^])/,/^(?:[$])/,/^(?:[\\])/,/^(?:[(])/,/^(?:[)])/,/^(?:[?])/,/^(?:[=])/,/^(?:[!])/,/^(?:[*])/,/^(?:[+])/,/^(?:[{])/,/^(?:[}])/,/^(?:[,])/,/^(?:[\.])/,/^(?:[\[])/,/^(?:[\]])/,/^(?:[-])/,/^(?:[:])/,/^(?:[b])/,/^(?:[B])/,/^(?:[c])/,/^(?:[d])/,/^(?:[D])/,/^(?:[f])/,/^(?:[n])/,/^(?:[r])/,/^(?:[s])/,/^(?:[S])/,/^(?:[t])/,/^(?:[u])/,/^(?:[v])/,/^(?:[w])/,/^(?:[W])/,/^(?:[x])/,/^(?:$)/,/^(?:[0-9])/,/^(?:[a-fA-F])/,/^(?:[a-zA-Z])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}